// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwitterUalaChallenge.Infrastructure.Persistence;

#nullable disable

namespace TwitterUalaChallenge.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(TwitterUalaChallengeDbContext))]
    [Migration("20250504231225_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TwitterUalaChallenge")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.Follow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_id");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uuid")
                        .HasColumnName("followed_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.HasKey("FollowerId", "FollowedId")
                        .HasName("pk_tfollow");

                    b.HasIndex("FollowedId")
                        .HasDatabaseName("ix_tfollow_followed_id");

                    b.HasIndex("FollowerId", "FollowedId")
                        .HasDatabaseName("ix_tfollow_id");

                    b.ToTable("tfollow", "TwitterUalaChallenge", t =>
                        {
                            t.HasCheckConstraint("CK_TFollow_NoSelfFollow", "follower_id <> followed_id");
                        });
                });

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.Tweet", b =>
                {
                    b.Property<Guid>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tweet_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("character varying(280)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TweetId")
                        .HasName("pk_ttweet");

                    b.HasIndex("TweetId")
                        .HasDatabaseName("ix_ttweet_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ttweet_user_id");

                    b.ToTable("ttweet", "TwitterUalaChallenge");
                });

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("pk_tuser");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tuser_id");

                    b.ToTable("tuser", "TwitterUalaChallenge");
                });

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.Follow", b =>
                {
                    b.HasOne("TwitterUalaChallenge.Domain.Entities.User", "FollowedUser")
                        .WithMany("FollowersRelations")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tfollow_users_followed_id");

                    b.HasOne("TwitterUalaChallenge.Domain.Entities.User", "FollowerUser")
                        .WithMany("FollowingRelations")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tfollow_users_follower_id");

                    b.Navigation("FollowedUser");

                    b.Navigation("FollowerUser");
                });

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.Tweet", b =>
                {
                    b.HasOne("TwitterUalaChallenge.Domain.Entities.User", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ttweet_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwitterUalaChallenge.Domain.Entities.User", b =>
                {
                    b.Navigation("FollowersRelations");

                    b.Navigation("FollowingRelations");

                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
